/***************************************************************************
* Copyright (c) Johan Mabille, Sylvain Corlay and Wolf Vollprecht          *
* Copyright (c) QuantStack                                                 *
*                                                                          *
* Distributed under the terms of the BSD 3-Clause License.                 *
*                                                                          *
* The full license is in the file LICENSE, distributed with this software. *
****************************************************************************/
// This file is generated from test/files/cppy_source/test_extended_xsort.cppy by preprocess.py!
// Warning: This file should not be modified directly! Instead, modify the `*.cppy` file.


#include <xtensor/xarray.hpp>
#include <xtensor/xio.hpp>
#include <xtensor/xview.hpp>
#include <xtensor/xsort.hpp>
#include <xtensor/xmath.hpp>

#include "test_common_macros.hpp"

namespace xt
{
    using namespace xt::placeholders;

    template <class T>
    bool check_partition_equal(const T& a1, const T& a2, std::size_t kth)
    {
        auto p = a1[kth];
        EXPECT_EQ(p, a2[kth]);

        for (std::size_t i = 0; i < kth; ++i)
        {
            EXPECT_TRUE(a1[i] < p);
            EXPECT_TRUE(a2[i] < p);
        }

        for (std::size_t i = kth + 1; i < a1.size(); ++i)
        {
            EXPECT_TRUE(p < a1[i]);
            EXPECT_TRUE(p < a2[i]);
        }
        return true;
    }

    template <class X, class Y, class Z>
    bool check_argpartition_equal(const X& data, const Y& a1, const Z& a2, std::size_t kth)
    {
        auto p = static_cast<std::size_t>(a1[kth]);
        EXPECT_EQ(p, std::size_t(a2[kth]));
        auto el = data[static_cast<std::size_t>(a1[kth])];
        for (std::size_t i = 0; i < kth; ++i)
        {
            EXPECT_TRUE(data[static_cast<std::size_t>(a1[i])] < el);
            EXPECT_TRUE(data[static_cast<std::size_t>(a2[i])] < el);
        }

        for (std::size_t i = kth + std::size_t(1); i < a1.size(); ++i)
        {
            EXPECT_TRUE(el < data[static_cast<std::size_t>(a1[i])]);
            EXPECT_TRUE(el < data[static_cast<std::size_t>(a2[i])]);
        }
        return true;
    }

    /*py
    a = np.random.randint(0, 1000, size=(20,))
    */
    TEST(xtest_extended, partition)
    {
        // py_a
        xarray<long> py_a = {102,435,860,270,106, 71,700, 20,614,121,466,214,330,458, 87,372, 99,871,
                             663,130};

        // py_p5 = np.partition(a, 5)
        xarray<long> py_p5 = { 20, 71, 87, 99,102,106,121,700,614,435,466,214,330,458,270,372,860,871,
                              663,130};
        // py_p0 = np.partition(a, 0)
        xarray<long> py_p0 = { 20,435,860,270,106, 71,700,102,614,121,466,214,330,458, 87,372, 99,871,
                              663,130};
        // py_p13 = np.partition(a, 13)
        xarray<long> py_p13 = { 20,102, 99, 87,106, 71,121,270,130,435,372,214,330,458,614,466,860,871,
                               663,700};
        // py_p19 = np.partition(a, 19)
        xarray<long> py_p19 = { 20,102, 99, 87,106, 71,121,270,130,435,372,214,330,458,663,614,466,700,
                               860,871};

        // py_a5 = np.argpartition(a, 5)
        xarray<long> py_a5 = { 7, 5,14,16, 0, 4, 9, 6, 8, 1,10,11,12,13, 3,15, 2,17,18,19};
        // py_a0 = np.argpartition(a, 0)
        xarray<long> py_a0 = { 7, 1, 2, 3, 4, 5, 6, 0, 8, 9,10,11,12,13,14,15,16,17,18,19};
        // py_a13 = np.argpartition(a, 13)
        xarray<long> py_a13 = { 7, 0,16,14, 4, 5, 9, 3,19, 1,15,11,12,13, 8,10, 2,17,18, 6};
        // py_a19 = np.argpartition(a, 19)
        xarray<long> py_a19 = { 7, 0,16,14, 4, 5, 9, 3,19, 1,15,11,12,13,18, 8,10, 6, 2,17};

        auto part_a0 = xt::partition(py_a, 0);

        check_partition_equal(py_p0, part_a0, 0);
        check_partition_equal(py_p5, xt::partition(py_a, 5), 5);
        check_partition_equal(py_p13, xt::partition(py_a, 13), 13);
        check_partition_equal(py_p19, xt::partition(py_a, 19), 19);

        auto parta_a0 = xt::argpartition(py_a, 0);
        check_argpartition_equal(py_a, py_a0, parta_a0, 0);
        check_argpartition_equal(py_a, py_a5, xt::argpartition(py_a, 5), 5);
        check_argpartition_equal(py_a, py_a13, xt::argpartition(py_a, 13), 13);
        check_argpartition_equal(py_a, py_a19, xt::argpartition(py_a, 19), 19);

        // py_median = np.median(a)
        double py_median = 300.0;
        EXPECT_EQ(static_cast<decltype(py_a)::value_type>(py_median), xt::median(py_a));
    }

    /*py
    a = np.random.randint(0, 20, size=(20,))
    */
    TEST(xtest_extended, multi_partition)
    {
        // py_a
        xarray<long> py_a = { 1,11, 5, 1, 0,11,11,16, 9,15,14,14,18,11,19, 2, 4,18, 6, 8};

        // py_p0 = np.partition(a, (4, 5, 6))
        xarray<long> py_p0 = { 1, 1, 0, 2, 4, 5, 6, 8, 9,11,14,14,18,11,19,16,11,18,11,15};
        // py_p1 = np.partition(a, (2, 7, 12))
        xarray<long> py_p1 = { 0, 1, 1, 2, 4, 5, 6, 8, 9,11,11,11,11,15,19,16,14,18,18,14};

        auto part_p0 = xt::partition(py_a, {4, 5, 6});
        auto part_p1 = xt::partition(py_a, {2, 7, 12});

        EXPECT_EQ(part_p0(4), py_p0(4));
        EXPECT_EQ(part_p0(5), py_p0(5));
        EXPECT_EQ(part_p0(6), py_p0(6));

        EXPECT_EQ(part_p1(2), py_p1(2));
        EXPECT_EQ(part_p1(7), py_p1(7));
        EXPECT_EQ(part_p1(12), py_p1(12));

        // py_a0 = np.argpartition(a, (4, 5, 6))
        xarray<long> py_a0 = { 0, 3, 4,15,16, 2,18,19, 8, 1,10,11,12,13,14, 7, 6,17, 5, 9};
        // py_a1 = np.argpartition(a, (2, 7, 12))
        xarray<long> py_a1 = { 4, 3, 0,15,16, 2,18,19, 8,13, 1, 6, 5, 9,14, 7,10,17,12,11};

        auto part_a0 = xt::argpartition(py_a, {4, 5, 6});
        auto part_a1 = xt::argpartition(py_a, {2, 7, 12});

        EXPECT_EQ(py_a[part_a0(4)], py_a[static_cast<std::size_t>(py_a0(4))]);
        EXPECT_EQ(py_a[part_a0(5)], py_a[static_cast<std::size_t>(py_a0(5))]);
        EXPECT_EQ(py_a[part_a0(6)], py_a[static_cast<std::size_t>(py_a0(6))]);

        EXPECT_EQ(py_a[part_a1(2)], py_a[static_cast<std::size_t>(py_a1(2))]);
        EXPECT_EQ(py_a[part_a1(7)], py_a[static_cast<std::size_t>(py_a1(7))]);
        EXPECT_EQ(py_a[part_a1(12)], py_a[static_cast<std::size_t>(py_a1(12))]);
    }

    /*py
    a = np.random.rand(5, 5, 5)
    */
    TEST(xtest_extended, quantile_axis)
    {
        // py_a
        xarray<double> py_a = {{{0.0650515929852795,0.9488855372533332,0.9656320330745594,
                                 0.8083973481164611,0.3046137691733707},
                                {0.0976721140063839,0.6842330265121569,0.4401524937396013,
                                 0.1220382348447788,0.4951769101112702},
                                {0.0343885211152184,0.9093204020787821,0.2587799816000169,
                                 0.662522284353982 ,0.311711076089411 },
                                {0.5200680211778108,0.5467102793432796,0.184854455525527 ,
                                 0.9695846277645586,0.7751328233611146},
                                {0.9394989415641891,0.8948273504276488,0.5978999788110851,
                                 0.9218742350231168,0.0884925020519195}},

                               {{0.1959828624191452,0.0452272889105381,0.3253303307632643,
                                 0.388677289689482 ,0.2713490317738959},
                                {0.8287375091519293,0.3567533266935893,0.2809345096873808,
                                 0.5426960831582485,0.1409242249747626},
                                {0.8021969807540397,0.0745506436797708,0.9868869366005173,
                                 0.7722447692966574,0.1987156815341724},
                                {0.0055221171236024,0.8154614284548342,0.7068573438476171,
                                 0.7290071680409873,0.7712703466859457},
                                {0.0740446517340904,0.3584657285442726,0.1158690595251297,
                                 0.8631034258755935,0.6232981268275579}},

                               {{0.3308980248526492,0.0635583502860236,0.3109823217156622,
                                 0.325183322026747 ,0.7296061783380641},
                                {0.6375574713552131,0.8872127425763265,0.4722149251619493,
                                 0.1195942459383017,0.713244787222995 },
                                {0.7607850486168974,0.5612771975694962,0.770967179954561 ,
                                 0.4937955963643907,0.5227328293819941},
                                {0.4275410183585496,0.0254191267440952,0.1078914269933045,
                                 0.0314291856867343,0.6364104112637804},
                                {0.3143559810763267,0.5085706911647028,0.907566473926093 ,
                                 0.2492922291488749,0.4103829230356297}},

                               {{0.7555511385430487,0.2287981654916225,0.076979909828793 ,
                                 0.289751452913768 ,0.1612212872540044},
                                {0.9296976523425731,0.808120379564417 ,0.6334037565104235,
                                 0.8714605901877177,0.8036720768991145},
                                {0.1865700588860358,0.8925589984899778,0.5393422419156507,
                                 0.8074401551640625,0.8960912999234932},
                                {0.3180034749718639,0.1100519245276768,0.2279351625419417,
                                 0.4271077886262563,0.8180147659224931},
                                {0.8607305832563434,0.0069521305311907,0.5107473025775657,
                                 0.417411003148779 ,0.2221078104707302}},

                               {{0.1198653673336828,0.337615171403628 ,0.9429097039125192,
                                 0.3232029320207552,0.5187906217433661},
                                {0.7030189588951778,0.363629602379294 ,0.9717820827209607,
                                 0.9624472949421112,0.2517822958253642},
                                {0.4972485058923855,0.3008783098167697,0.2848404943774676,
                                 0.0368869473545328,0.6095643339798968},
                                {0.5026790232288615,0.0514787512499894,0.2786464642366114,
                                 0.9082658859666537,0.2395618906669724},
                                {0.1448948720912231,0.489452760277563 ,0.9856504541106007,
                                 0.2420552715115004,0.6721355474058786}}};

        // py_q0 = np.quantile(a, [0., .3, .1, 1.], axis=0)
        xarray<double> py_q0 = {{{0.0650515929852795,0.0452272889105381,0.076979909828793 ,
                                  0.289751452913768 ,0.1612212872540044},
                                 {0.0976721140063839,0.3567533266935893,0.2809345096873808,
                                  0.1195942459383017,0.1409242249747626},
                                 {0.0343885211152184,0.0745506436797708,0.2587799816000169,
                                  0.0368869473545328,0.1987156815341724},
                                 {0.0055221171236024,0.0254191267440952,0.1078914269933045,
                                  0.0314291856867343,0.2395618906669724},
                                 {0.0740446517340904,0.0069521305311907,0.1158690595251297,
                                  0.2420552715115004,0.0884925020519195}},

                                {{0.1350888663507753,0.0966063133271434,0.3138519235251827,
                                  0.3235990100219536,0.2780019792537909},
                                 {0.650649768863206 ,0.4277502872058666,0.4465649800240709,
                                  0.2061698045074727,0.3004612186825453},
                                 {0.2487057482873057,0.352958087367315 ,0.3357408438851042,
                                  0.5275409339623089,0.3539154267479276},
                                 {0.339910983649201 ,0.0631933859055268,0.19347059692881  ,
                                  0.4874876645092025,0.6633823983482134},
                                 {0.1787870938882438,0.3846631348909307,0.5281778378242696,
                                  0.2829159839488558,0.2597628329837102}},

                                {{0.0869771027246408,0.0525597134607323,0.1705808745835407,
                                  0.3031320445565629,0.205272385061961 },
                                 {0.3136262569459156,0.3595038369678711,0.344621703308269 ,
                                  0.1205718415008925,0.1852674533150032},
                                 {0.0952611362235454,0.1650817101345703,0.2692041867109972,
                                  0.219650406958476 ,0.2439138393562678},
                                 {0.130514660262907 ,0.0358429765464529,0.1386766384061935,
                                  0.1897006268625431,0.3983012989056957},
                                 {0.1023847398769435,0.1475575697364235,0.2738203567461042,
                                  0.2449500545664502,0.1419386254194438}},

                                {{0.7555511385430487,0.9488855372533332,0.9656320330745594,
                                  0.8083973481164611,0.7296061783380641},
                                 {0.9296976523425731,0.8872127425763265,0.9717820827209607,
                                  0.9624472949421112,0.8036720768991145},
                                 {0.8021969807540397,0.9093204020787821,0.9868869366005173,
                                  0.8074401551640625,0.8960912999234932},
                                 {0.5200680211778108,0.8154614284548342,0.7068573438476171,
                                  0.9695846277645586,0.8180147659224931},
                                 {0.9394989415641891,0.8948273504276488,0.9856504541106007,
                                  0.9218742350231168,0.6721355474058786}}};
        // py_q1 = np.quantile(a, [0., .3, .1, 1.], axis=1)
        xarray<double> py_q1 = {{{0.0343885211152184,0.5467102793432796,0.184854455525527 ,
                                  0.1220382348447788,0.0884925020519195},
                                 {0.0055221171236024,0.0452272889105381,0.1158690595251297,
                                  0.388677289689482 ,0.1409242249747626},
                                 {0.3143559810763267,0.0254191267440952,0.1078914269933045,
                                  0.0314291856867343,0.4103829230356297},
                                 {0.1865700588860358,0.0069521305311907,0.076979909828793 ,
                                  0.289751452913768 ,0.1612212872540044},
                                 {0.1198653673336828,0.0514787512499894,0.2786464642366114,
                                  0.0368869473545328,0.2395618906669724}},

                                {{0.0715756971895004,0.7263518912952552,0.2950544840279338,
                                  0.6916972971064778,0.3060332305565787},
                                 {0.0984322938711013,0.1309911802825345,0.2898136739025575,
                                  0.5799583001347962,0.2132423515821171},
                                 {0.3502266235538293,0.1525608184617595,0.3432288424049196,
                                  0.1455338425804164,0.5454683457583513},
                                 {0.4055130076861008,0.1338011727204659,0.2844975905490665,
                                  0.4193503602442745,0.3384206637564071},
                                 {0.2153655988514556,0.3082256821341413,0.4164543362844779,
                                  0.2582848036133514,0.3051839610089646}},

                                {{0.0466537498632428,0.6017193782108305,0.214424665955323 ,
                                  0.3382318546484601,0.1749410089005   },
                                 {0.0329311309677976,0.0569566308182312,0.1818952395900301,
                                  0.4502848070769886,0.1640408075985265},
                                 {0.3209727985868557,0.0406748161608666,0.1891277848822476,
                                  0.0666952097873612,0.4553228855741754},
                                 {0.2391434253203671,0.0481920481297851,0.1373620109140525,
                                  0.3408152730077724,0.1855758965406948},
                                 {0.1298771692366989,0.1512385746767015,0.2811240762929539,
                                  0.1189542770173199,0.2444500527303291}},

                                {{0.9394989415641891,0.9488855372533332,0.9656320330745594,
                                  0.9695846277645586,0.7751328233611146},
                                 {0.8287375091519293,0.8154614284548342,0.9868869366005173,
                                  0.8631034258755935,0.7712703466859457},
                                 {0.7607850486168974,0.8872127425763265,0.907566473926093 ,
                                  0.4937955963643907,0.7296061783380641},
                                 {0.9296976523425731,0.8925589984899778,0.6334037565104235,
                                  0.8714605901877177,0.8960912999234932},
                                 {0.7030189588951778,0.489452760277563 ,0.9856504541106007,
                                  0.9624472949421112,0.6721355474058786}}};
        // py_q2 = np.quantile(a, [0., .3, .1, 1.], axis=2)
        xarray<double> py_q2 = {{{0.0650515929852795,0.0976721140063839,0.0343885211152184,
                                  0.184854455525527 ,0.0884925020519195},
                                 {0.0452272889105381,0.1409242249747626,0.0745506436797708,
                                  0.0055221171236024,0.0740446517340904},
                                 {0.0635583502860236,0.1195942459383017,0.4937955963643907,
                                  0.0254191267440952,0.2492922291488749},
                                 {0.076979909828793 ,0.6334037565104235,0.1865700588860358,
                                  0.1100519245276768,0.0069521305311907},
                                 {0.1198653673336828,0.2517822958253642,0.0368869473545328,
                                  0.0514787512499894,0.1448948720912231}},

                                {{0.4053704849619887,0.1856610866237433,0.2693662004978957,
                                  0.5253964728109046,0.6572854531343979},
                                 {0.2110560962900953,0.2960982730886225,0.3134214990866694,
                                  0.7112873086862912,0.1643883933289583},
                                 {0.3138225217778792,0.5052834344006021,0.5304417030194944,
                                  0.0467216339480483,0.3335613694681873},
                                 {0.174736662901528 ,0.804561737432175 ,0.5929618245653331,
                                  0.2459488250279261,0.26116844900634  },
                                 {0.3260853798973298,0.4315074736824707,0.288048057465328 ,
                                  0.2473788053809002,0.2915347692647129}},

                                {{0.160876463460516 ,0.1074185623417419,0.1241451053091378,
                                  0.3189398817864406,0.2922554927555858},
                                 {0.1055295183139809,0.1969283388598099,0.1242166588215315,
                                  0.2860562078132083,0.0907744148505061},
                                 {0.1625279388578791,0.2606425176277608,0.505370489571432 ,
                                  0.0278231503211508,0.2753177299198556},
                                 {0.1106764607988776,0.7015110846658998,0.3276789320978818,
                                  0.1572052197333827,0.0930144025070065},
                                 {0.2012003932085118,0.2965212184469361,0.1360683661637067,
                                  0.1267120070167826,0.183759031859334 }},

                                {{0.9656320330745594,0.6842330265121569,0.9093204020787821,
                                  0.9695846277645586,0.9394989415641891},
                                 {0.388677289689482 ,0.8287375091519293,0.9868869366005173,
                                  0.8154614284548342,0.8631034258755935},
                                 {0.7296061783380641,0.8872127425763265,0.770967179954561 ,
                                  0.6364104112637804,0.907566473926093 },
                                 {0.7555511385430487,0.9296976523425731,0.8960912999234932,
                                  0.8180147659224931,0.8607305832563434},
                                 {0.9429097039125192,0.9717820827209607,0.6095643339798968,
                                  0.9082658859666537,0.9856504541106007}}};

        EXPECT_TRUE(xt::allclose(py_q0, xt::quantile(py_a, {0., .3, .1, 1.}, 0)));
        EXPECT_TRUE(xt::allclose(py_q1, xt::quantile(py_a, {0., .3, .1, 1.}, 1)));
        EXPECT_TRUE(xt::allclose(py_q2, xt::quantile(py_a, {0., .3, .1, 1.}, 2)));
    }

    /*py
    a = np.random.rand(5, 5, 5)
    */
    TEST(xtest_extended, quantile_methods)
    {
        // py_a
        xarray<double> py_a = {{{0.7616196153287176,0.2376375439923997,0.7282163486118596,
                                 0.3677831327192532,0.6323058305935795},
                                {0.6335297107608947,0.5357746840747585,0.0902897700544083,
                                 0.835302495589238 ,0.3207800649717358},
                                {0.1865185103998542,0.0407751415547639,0.5908929431882418,
                                 0.6775643618422824,0.0165878289278562},
                                {0.512093058299281 ,0.226495775197938 ,0.6451727904094499,
                                 0.1743664290049914,0.690937738102466 },
                                {0.3867353463005374,0.9367299887367345,0.1375209441459933,
                                 0.3410663510502585,0.1134735212405891}},

                               {{0.9246936182785628,0.877339353380981 ,0.2579416277151556,
                                 0.659984046034179 ,0.8172222002012158},
                                {0.5552008115994623,0.5296505783560065,0.2418522909004517,
                                 0.0931027678058992,0.8972157579533268},
                                {0.9004180571633305,0.6331014572732679,0.3390297910487007,
                                 0.3492095746126609,0.7259556788702394},
                                {0.8971102599525771,0.8870864242651173,0.7798755458576239,
                                 0.6420316461542878,0.0841399649950488},
                                {0.1616287140946138,0.8985541885270792,0.6064290596595899,
                                 0.0091970516166296,0.1014715428660321}},

                               {{0.6635017691080558,0.0050615838462187,0.1608080514174987,
                                 0.5487337893665861,0.6918951976926933},
                                {0.6519612595026005,0.2242693094605598,0.7121792213475359,
                                 0.2372490874968001,0.3253996981592677},
                                {0.7464914051180241,0.6496328990472147,0.8492234104941779,
                                 0.6576128923003434,0.5683086033354716},
                                {0.0936747678280925,0.3677158030594335,0.2652023676817254,
                                 0.2439896433790836,0.9730105547524456},
                                {0.3930977246667604,0.8920465551771133,0.6311386259972629,
                                 0.7948113035416484,0.5026370931051921}},

                               {{0.5769038846263591,0.4925176938188639,0.1952429877980445,
                                 0.7224521152615053,0.2807723624408558},
                                {0.0243159664314538,0.6454722959071678,0.1771106794070489,
                                 0.9404585843529143,0.9539285770025874},
                                {0.9148643902204485,0.3701587002554444,0.0154566165288674,
                                 0.9283185625877254,0.4281841483173143},
                                {0.9666548190436696,0.9636199770892528,0.8530094554673601,
                                 0.2944488920695857,0.3850977286019253},
                                {0.8511366715168569,0.3169220051562777,0.1694927466860925,
                                 0.5568012624583502,0.936154774160781 }},

                               {{0.696029796674973 ,0.570061170089365 ,0.0971764937707685,
                                 0.6150072266991697,0.9900538501042633},
                                {0.140084015236524 ,0.5183296523637367,0.8773730719279554,
                                 0.7407686177542044,0.697015740995268 },
                                {0.7024840839871093,0.3594911512197552,0.2935918442644934,
                                 0.8093611554785136,0.8101133946791808},
                                {0.8670723185801037,0.9132405525564713,0.5113423988609378,
                                 0.5015162946871996,0.7982951789667752},
                                {0.6499639307777652,0.7019668772577033,0.795792669436101 ,
                                 0.8900053418175663,0.3379951568515358}}};

        // py_q4 = np.quantile(a, [0., .3, .1, 1.], method="interpolated_inverted_cdf")
        xarray<double> py_q4 = {0.0050615838462187,0.3385124739501182,0.1074725320533106,
                                0.9900538501042633};
        // py_q5 = np.quantile(a, [0., .3, .1, 1.], method="hazen")
        xarray<double> py_q5 = {0.0050615838462187,0.3390297910487007,0.1134735212405891,
                                0.9900538501042633};
        // py_q6 = np.quantile(a, [0., .3, .1, 1.], method="weibull")
        xarray<double> py_q6 = {0.0050615838462187,0.3388228642092677,0.1086727298907663,
                                0.9900538501042633};
        // py_q7 = np.quantile(a, [0., .3, .1, 1.], method="linear")
        xarray<double> py_q7 = {0.0050615838462187,0.3394371030490123,0.1230924904027507,
                                0.9900538501042633};
        // py_q8 = np.quantile(a, [0., .3, .1, 1.], method="median_unbiased")
        xarray<double> py_q8 = {0.0050615838462187,0.3389608154355563,0.1118732574573148,
                                0.9900538501042633};
        // py_q9 = np.quantile(a, [0., .3, .1, 1.], method="normal_unbiased")
        xarray<double> py_q9 = {0.0050615838462187,0.3389780593388425,0.1122733234031334,
                                0.9900538501042633};

        PRINT(py_q4);
        (xt::quantile(py_a, {0., .3, .1, 1.}, quantile_method::interpolated_inverted_cdf));

        // EXPECT_TRUE(
        //     xt::allclose(
        //         py_q4,
        //         xt::quantile(py_a, {0., .3, .1, 1.}, quantile_method::interpolated_inverted_cdf)
        //     )
        // );
        // EXPECT_TRUE(
        //     xt::allclose(py_q5, xt::quantile(py_a, {0., .3, .1, 1.}, quantile_method::hazen))
        // );
        // EXPECT_TRUE(
        //     xt::allclose(py_q6, xt::quantile(py_a, {0., .3, .1, 1.}, quantile_method::weibull))
        // );
        // EXPECT_TRUE(
        //     xt::allclose(py_q7, xt::quantile(py_a, {0., .3, .1, 1.}, quantile_method::linear))
        // );
        // EXPECT_TRUE(
        //     xt::allclose(
        //         py_q8,
        //         xt::quantile(py_a, {0., .3, .1, 1.}, quantile_method::median_unbiased)
        //     )
        // );
        // EXPECT_TRUE(
        //     xt::allclose(
        //         py_q9,
        //         xt::quantile(py_a, {0., .3, .1, 1.}, quantile_method::normal_unbiased)
        //     )
        // );
    }

    /*py
    a = np.random.rand(5, 5, 5)
    */
    TEST(xtest_extended, axis_median)
    {
        // py_a
        xarray<double> py_a = {{{0.375582952639944 ,0.093981939840869 ,0.578280140996174 ,
                                 0.0359422737967421,0.4655980181324602},
                                {0.5426446347075766,0.2865412521282844,0.5908332605690108,
                                 0.0305002499390494,0.0373481887492144},
                                {0.8226005606596583,0.3601906414112629,0.1270605126518848,
                                 0.5222432600548044,0.7699935530986108},
                                {0.2158210274968432,0.6228904758190003,0.085347464993768 ,
                                 0.0516817211686077,0.531354631568148 },
                                {0.5406351216101065,0.6374299014982066,0.7260913337226615,
                                 0.9758520794625346,0.5163003483011953}},

                               {{0.322956472941246 ,0.7951861947687037,0.2708322512620742,
                                 0.4389714207056361,0.078456381342266 },
                                {0.0253507434154575,0.9626484146779251,0.8359801205122058,
                                 0.695974206093698 ,0.4089529444142699},
                                {0.1732943200708458,0.156437042671086 ,0.2502428981645953,
                                 0.5492266647061205,0.7145959227000623},
                                {0.6601973767177313,0.2799338969459428,0.9548652806631941,
                                 0.7378969166957685,0.5543540525114007},
                                {0.6117207462343522,0.4196000624277899,0.2477309895011575,
                                 0.3559726786512616,0.7578461104643691}},

                               {{0.0143934886297559,0.1160726405069162,0.0460026420217527,
                                 0.0407288023189701,0.8554605840110072},
                                {0.7036578593800237,0.4741738290873252,0.0978341606510015,
                                 0.4916158751168324,0.4734717707805657},
                                {0.1732018699100152,0.433851649237973 ,0.3985047343973734,
                                 0.6158500980522165,0.6350936508676438},
                                {0.0453040097720445,0.3746126146264712,0.6258599157142364,
                                 0.5031362585800877,0.8564898411883223},
                                {0.658693631618945 ,0.1629344270814297,0.0705687474004298,
                                 0.6424192782063156,0.0265113105416218}},

                               {{0.5857755812734633,0.9402302414249576,0.575474177875879 ,
                                 0.3881699262065219,0.6432882184423532},
                                {0.4582528904915166,0.5456167893159349,0.9414648087765252,
                                 0.3861026378007743,0.9611905638239142},
                                {0.9053506419560637,0.1957911347892964,0.0693613008751655,
                                 0.1007780013774267,0.0182218256515497},
                                {0.0944429607559284,0.6830067734163568,0.071188648460229 ,
                                 0.3189756302937613,0.8448753109694546},
                                {0.0232719357358259,0.8144684825889358,0.2818547747733999,
                                 0.1181648276216563,0.6967371653641506}},

                               {{0.628942846779884 ,0.877472013527053 ,0.7350710438038858,
                                 0.8034809303848486,0.2820345725713065},
                                {0.1774395437797228,0.7506147516408583,0.806834739267264 ,
                                 0.9905051420006733,0.4126176769114265},
                                {0.3720180857927832,0.7764129607419968,0.3408035402530178,
                                 0.9307573256035647,0.8584127518430118},
                                {0.4289940273750183,0.7508710677914974,0.7545428740846823,
                                 0.1031238688359326,0.9025529066795667},
                                {0.5052523724478571,0.8264574661077416,0.3200496010306118,
                                 0.8955232284962005,0.3892016787341631}}};
        // py_m = np.median(a)
        double py_m = 0.49161587511683236;

        // py_m0 = np.median(a, 0)
        xarray<double> py_m0 = {{0.375582952639944 ,0.7951861947687037,0.575474177875879 ,
                                 0.3881699262065219,0.4655980181324602},
                                {0.4582528904915166,0.5456167893159349,0.806834739267264 ,
                                 0.4916158751168324,0.4126176769114265},
                                {0.3720180857927832,0.3601906414112629,0.2502428981645953,
                                 0.5492266647061205,0.7145959227000623},
                                {0.2158210274968432,0.6228904758190003,0.6258599157142364,
                                 0.3189756302937613,0.8448753109694546},
                                {0.5406351216101065,0.6374299014982066,0.2818547747733999,
                                 0.6424192782063156,0.5163003483011953}};
        // py_m1 = np.median(a, 1)
        xarray<double> py_m1 = {{0.5406351216101065,0.3601906414112629,0.578280140996174 ,
                                 0.0516817211686077,0.5163003483011953},
                                {0.322956472941246 ,0.4196000624277899,0.2708322512620742,
                                 0.5492266647061205,0.5543540525114007},
                                {0.1732018699100152,0.3746126146264712,0.0978341606510015,
                                 0.5031362585800877,0.6350936508676438},
                                {0.4582528904915166,0.6830067734163568,0.2818547747733999,
                                 0.3189756302937613,0.6967371653641506},
                                {0.4289940273750183,0.7764129607419968,0.7350710438038858,
                                 0.8955232284962005,0.4126176769114265}};
        // py_m2 = np.median(a, 2)
        xarray<double> py_m2 = {{0.375582952639944 ,0.2865412521282844,0.5222432600548044,
                                 0.2158210274968432,0.6374299014982066},
                                {0.322956472941246 ,0.695974206093698 ,0.2502428981645953,
                                 0.6601973767177313,0.4196000624277899},
                                {0.0460026420217527,0.4741738290873252,0.433851649237973 ,
                                 0.5031362585800877,0.1629344270814297},
                                {0.5857755812734633,0.5456167893159349,0.1007780013774267,
                                 0.3189756302937613,0.2818547747733999},
                                {0.7350710438038858,0.7506147516408583,0.7764129607419968,
                                 0.7508710677914974,0.5052523724478571}};

        EXPECT_EQ(py_m, xt::median(py_a));
        EXPECT_EQ(py_m0, xt::median(py_a, 0));
        EXPECT_EQ(py_m1, xt::median(py_a, 1));
        EXPECT_EQ(py_m2, xt::median(py_a, 2));
    }

    /*py
    a = np.random.permutation(np.arange(5 * 5 * 5)).reshape(5, 5, 5)
    */
    TEST(xtest_extended, axis_partition)
    {
        // py_a
        xarray<long> py_a = {{{ 23,109,100, 58,  1},
                              { 29, 79, 91, 72, 46},
                              { 85,108, 88, 21, 83},
                              { 33, 69, 61,102,115},
                              {112, 78, 14, 89, 80}},

                             {{ 48, 55, 42, 66, 90},
                              {113, 10, 92,101, 20},
                              { 31,  5, 71, 32,107},
                              { 47,106, 62,  0, 54},
                              { 40,118, 50, 19,117}},

                             {{116, 81, 67,  2, 59},
                              { 63, 25,  9, 76, 95},
                              { 53, 43,123,121, 30},
                              { 35,  3, 44,105, 64},
                              {  7, 37, 36, 28, 93}},

                             {{ 65, 26, 49, 87, 97},
                              { 39, 12, 45,  6, 16},
                              { 96, 73,119,120, 17},
                              { 74, 86, 34,  4, 13},
                              {122, 57, 41,103, 38}},

                             {{ 56,111, 22, 52, 99},
                              { 84,114, 24,124, 98},
                              { 68, 15,110, 82, 51},
                              { 94, 77, 27, 70,  8},
                              { 75, 18,104, 60, 11}}};

        // py_p0 = np.partition(a, 2, 0)
        xarray<long> py_p0 = {{{ 23, 26, 22,  2,  1},
                               { 29, 10,  9,  6, 16},
                               { 31,  5, 71, 21, 17},
                               { 33,  3, 27,  0,  8},
                               {  7, 18, 14, 19, 11}},

                              {{ 48, 55, 42, 52, 59},
                               { 39, 12, 24, 72, 20},
                               { 53, 15, 88, 32, 30},
                               { 35, 69, 34,  4, 13},
                               { 40, 37, 36, 28, 38}},

                              {{ 56, 81, 49, 58, 90},
                               { 63, 25, 45, 76, 46},
                               { 68, 43,110, 82, 51},
                               { 47, 77, 44, 70, 54},
                               { 75, 57, 41, 60, 80}},

                              {{ 65,109, 67, 87, 97},
                               {113, 79, 91,101, 95},
                               { 96, 73,119,120, 83},
                               { 74, 86, 62,102, 64},
                               {122,118, 50,103,117}},

                              {{116,111,100, 66, 99},
                               { 84,114, 92,124, 98},
                               { 85,108,123,121,107},
                               { 94,106, 61,105,115},
                               {112, 78,104, 89, 93}}};
        // py_p1 = np.partition(a, 4, 1)
        xarray<long> py_p1 = {{{ 33, 69, 61, 21, 46},
                               { 23, 78, 14, 58,  1},
                               { 29, 79, 88, 72, 80},
                               { 85,108, 91, 89, 83},
                               {112,109,100,102,115}},

                              {{ 31, 10, 42,  0, 54},
                               { 40,  5, 50, 19, 90},
                               { 47, 55, 62, 32, 20},
                               { 48,106, 71, 66,107},
                               {113,118, 92,101,117}},

                              {{ 35,  3, 44,  2, 30},
                               {  7, 37, 36, 28, 59},
                               { 53, 25,  9, 76, 64},
                               { 63, 43, 67,105, 93},
                               {116, 81,123,121, 95}},

                              {{ 74, 12, 34,  4, 13},
                               { 65, 26, 41, 87, 17},
                               { 39, 57, 45,  6, 16},
                               { 96, 73, 49,103, 38},
                               {122, 86,119,120, 97}},

                              {{ 56, 15, 27, 52,  8},
                               { 68, 18, 22, 60, 11},
                               { 75, 77, 24, 70, 51},
                               { 84,111,104, 82, 98},
                               { 94,114,110,124, 99}}};
        // py_p2 = np.partition(a, 3, 2)
        xarray<long> py_p2 = {{{  1, 23, 58,100,109},
                               { 29, 46, 72, 79, 91},
                               { 21, 83, 85, 88,108},
                               { 33, 61, 69,102,115},
                               { 78, 14, 80, 89,112}},

                              {{ 42, 48, 55, 66, 90},
                               { 10, 20, 92,101,113},
                               { 32, 31,  5, 71,107},
                               {  0, 47, 54, 62,106},
                               { 19, 40, 50,117,118}},

                              {{  2, 59, 67, 81,116},
                               { 25,  9, 63, 76, 95},
                               { 43, 30, 53,121,123},
                               {  3, 35, 44, 64,105},
                               { 28,  7, 36, 37, 93}},

                              {{ 26, 49, 65, 87, 97},
                               {  6, 16, 12, 39, 45},
                               { 73, 17, 96,119,120},
                               {  4, 13, 34, 74, 86},
                               { 38, 41, 57,103,122}},

                              {{ 52, 22, 56, 99,111},
                               { 24, 84, 98,114,124},
                               { 15, 51, 68, 82,110},
                               {  8, 27, 70, 77, 94},
                               { 60, 11, 18, 75,104}}};

        auto p0 = xt::partition(py_a, 2, 0);
        auto p1 = xt::partition(py_a, 4, 1);
        auto p2 = xt::partition(py_a, 3, 2);

        EXPECT_EQ(xt::view(py_p0, 2, all(), all()), xt::view(p0, 2, all(), all()));
        EXPECT_EQ(xt::view(py_p1, all(), 4, all()), xt::view(p1, all(), 4, all()));
        EXPECT_EQ(xt::view(py_p2, all(), all(), 3), xt::view(p2, all(), all(), 3));

        // py_a0 = np.argpartition(a, 2, 0)
        xarray<long> py_a0 = {{{0,3,4,2,0},
                               {0,1,2,3,3},
                               {1,1,1,0,3},
                               {0,2,4,1,4},
                               {2,4,0,1,4}},

                              {{1,1,1,4,2},
                               {3,3,4,0,1},
                               {2,4,0,1,2},
                               {2,0,3,3,3},
                               {1,2,2,2,3}},

                              {{4,2,3,0,1},
                               {2,2,3,2,0},
                               {4,2,4,4,4},
                               {1,4,2,4,1},
                               {4,3,3,4,0}},

                              {{3,0,2,3,3},
                               {1,0,0,1,2},
                               {3,3,3,3,0},
                               {3,3,1,0,2},
                               {3,1,1,3,1}},

                              {{2,4,0,1,4},
                               {4,4,1,4,4},
                               {0,0,2,2,1},
                               {4,1,0,2,0},
                               {0,0,4,0,2}}};
        // py_a1 = np.argpartition(a, 4, 1)
        xarray<long> py_a1 = {{{3,3,3,2,1},
                               {0,4,4,0,0},
                               {1,1,2,1,4},
                               {2,2,1,4,2},
                               {4,0,0,3,3}},

                              {{2,1,0,3,3},
                               {4,2,4,4,0},
                               {3,0,3,2,1},
                               {0,3,2,0,2},
                               {1,4,1,1,4}},

                              {{3,3,3,0,2},
                               {4,4,4,4,0},
                               {2,1,1,1,3},
                               {1,2,0,3,4},
                               {0,0,2,2,1}},

                              {{3,1,3,3,3},
                               {0,0,4,0,2},
                               {1,4,1,1,1},
                               {2,2,0,4,4},
                               {4,3,2,2,0}},

                              {{0,2,3,0,3},
                               {2,4,0,4,4},
                               {4,3,1,3,2},
                               {1,0,4,2,1},
                               {3,1,2,1,0}}};
        // py_a2 = np.argpartition(a, 3, 2)
        xarray<long> py_a2 = {{{4,0,3,2,1},
                               {0,4,3,1,2},
                               {3,4,0,2,1},
                               {0,2,1,3,4},
                               {1,2,4,3,0}},

                              {{2,0,1,3,4},
                               {1,4,2,3,0},
                               {3,0,1,2,4},
                               {3,0,4,2,1},
                               {3,0,2,4,1}},

                              {{3,4,2,1,0},
                               {1,2,0,3,4},
                               {1,4,0,3,2},
                               {1,0,2,4,3},
                               {3,0,2,1,4}},

                              {{1,2,0,3,4},
                               {3,4,1,0,2},
                               {1,4,0,2,3},
                               {3,4,2,0,1},
                               {4,2,1,3,0}},

                              {{3,2,0,4,1},
                               {2,0,4,1,3},
                               {1,4,0,3,2},
                               {4,2,3,1,0},
                               {3,4,1,0,2}}};

        auto a0 = xt::argpartition(py_a, 2, 0);
        auto a1 = xt::argpartition(py_a, 4, 1);
        auto a2 = xt::argpartition(py_a, 3, 2);

        EXPECT_EQ(xt::cast<std::size_t>(xt::view(py_a0, 2, all(), all())), xt::view(a0, 2, all(), all()));
        EXPECT_EQ(xt::cast<std::size_t>(xt::view(py_a1, all(), 4, all())), xt::view(a1, all(), 4, all()));
        EXPECT_EQ(xt::cast<std::size_t>(xt::view(py_a2, all(), all(), 3)), xt::view(a2, all(), all(), 3));
    }

    /*py
    a = np.random.permutation(np.arange(5 * 5 * 5)).reshape(5, 5, 5)
    */
    TEST(xtest_extended, multi_k_axis_partition)
    {
        // py_a
        xarray<long> py_a = {{{ 51,118,  6,106, 77},
                              {  8, 53,107, 60, 15},
                              {104, 66, 42,124, 56},
                              { 96, 21, 92,119, 47},
                              { 80, 97,123, 23,116}},

                             {{102,117, 19, 37, 18},
                              {110, 41, 98,108, 35},
                              { 70, 89,  1, 13, 78},
                              { 69, 14, 71, 75,105},
                              { 95, 74, 43, 86, 11}},

                             {{122, 73, 88, 87, 38},
                              {  7, 30,121, 33, 31},
                              { 39, 82, 67, 61,  3},
                              { 44, 50, 79,113, 36},
                              {112, 22, 52,  2, 94}},

                             {{101,103, 54, 20,  0},
                              { 93,109, 90,115, 58},
                              { 85,114, 25, 84, 10},
                              { 48, 17, 64,111,  4},
                              { 29, 55,  9, 65, 24}},

                             {{ 46, 68, 81,  5, 34},
                              { 45, 12, 28,120, 76},
                              { 83, 32, 72, 16, 62},
                              { 26, 63, 99, 40,100},
                              { 91, 27, 49, 59, 57}}};

        // py_p0 = np.partition(a, (1, 2), 0)
        xarray<long> py_p0 = {{{ 46, 68,  6,  5,  0},
                               {  7, 12, 28, 33, 15},
                               { 39, 32,  1, 13,  3},
                               { 26, 14, 64, 40,  4},
                               { 29, 22,  9,  2, 11}},

                              {{ 51, 73, 19, 20, 18},
                               {  8, 30, 90, 60, 31},
                               { 70, 66, 25, 16, 10},
                               { 44, 17, 71, 75, 36},
                               { 80, 27, 43, 23, 24}},

                              {{101,103, 54, 37, 34},
                               { 45, 41, 98,108, 35},
                               { 83, 82, 42, 61, 56},
                               { 48, 21, 79,111, 47},
                               { 91, 55, 49, 59, 57}},

                              {{122,117, 88, 87, 77},
                               { 93,109,121,115, 58},
                               { 85,114, 67, 84, 78},
                               { 69, 50, 92,113,105},
                               { 95, 97,123, 65,116}},

                              {{102,118, 81,106, 38},
                               {110, 53,107,120, 76},
                               {104, 89, 72,124, 62},
                               { 96, 63, 99,119,100},
                               {112, 74, 52, 86, 94}}};
        // py_p1 = np.partition(a, (1, 4), 1)
        xarray<long> py_p1 = {{{  8, 21,  6, 23, 15},
                               { 51, 53, 42, 60, 47},
                               { 80, 66, 92,106, 56},
                               { 96, 97,107,119, 77},
                               {104,118,123,124,116}},

                              {{ 69, 14,  1, 13, 11},
                               { 70, 41, 19, 37, 18},
                               { 95, 74, 43, 75, 35},
                               {102, 89, 71, 86, 78},
                               {110,117, 98,108,105}},

                              {{  7, 22, 52,  2,  3},
                               { 39, 30, 67, 33, 31},
                               { 44, 50, 79, 61, 36},
                               {112, 73, 88, 87, 38},
                               {122, 82,121,113, 94}},

                              {{ 29, 17,  9, 20,  0},
                               { 48, 55, 25, 65,  4},
                               { 85,103, 54, 84, 10},
                               { 93,109, 64,111, 24},
                               {101,114, 90,115, 58}},

                              {{ 26, 12, 28,  5, 34},
                               { 45, 27, 49, 16, 57},
                               { 46, 32, 72, 40, 62},
                               { 83, 63, 81, 59, 76},
                               { 91, 68, 99,120,100}}};
        // py_p2 = np.partition(a, (1, 3), 2)
        xarray<long> py_p2 = {{{  6, 51, 77,106,118},
                               {  8, 15, 53, 60,107},
                               { 42, 56, 66,104,124},
                               { 21, 47, 92, 96,119},
                               { 23, 80, 97,116,123}},

                              {{ 18, 19, 37,102,117},
                               { 35, 41, 98,108,110},
                               {  1, 13, 70, 78, 89},
                               { 14, 69, 71, 75,105},
                               { 11, 43, 74, 86, 95}},

                              {{ 38, 73, 87, 88,122},
                               {  7, 30, 31, 33,121},
                               {  3, 39, 61, 67, 82},
                               { 36, 44, 50, 79,113},
                               {  2, 22, 52, 94,112}},

                              {{  0, 20, 54,101,103},
                               { 58, 90, 93,109,115},
                               { 10, 25, 84, 85,114},
                               {  4, 17, 48, 64,111},
                               {  9, 24, 29, 55, 65}},

                              {{  5, 34, 46, 68, 81},
                               { 12, 28, 45, 76,120},
                               { 16, 32, 62, 72, 83},
                               { 26, 40, 63, 99,100},
                               { 27, 49, 57, 59, 91}}};

        auto p0 = xt::partition(py_a, {1, 2}, 0);
        auto p1 = xt::partition(py_a, {1, 4}, 1);
        auto p2 = xt::partition(py_a, {1, 3}, 2);

        EXPECT_EQ(xt::view(py_p0, 2, all(), all()), xt::view(p0, 2, all(), all()));
        EXPECT_EQ(xt::view(py_p1, all(), 4, all()), xt::view(p1, all(), 4, all()));
        EXPECT_EQ(xt::view(py_p2, all(), all(), 3), xt::view(p2, all(), all(), 3));

        EXPECT_EQ(xt::view(py_p0, 1, all(), all()), xt::view(p0, 1, all(), all()));
        EXPECT_EQ(xt::view(py_p1, all(), 1, all()), xt::view(p1, all(), 1, all()));
        EXPECT_EQ(xt::view(py_p2, all(), all(), 1), xt::view(p2, all(), all(), 1));

        // py_a0 = np.argpartition(a, (1, 2), 0)
        xarray<long> py_a0 = {{{4,4,0,4,3},
                               {2,4,4,2,0},
                               {2,4,1,1,2},
                               {4,1,3,4,3},
                               {3,2,3,2,1}},

                              {{0,2,1,3,1},
                               {0,2,3,0,2},
                               {1,0,3,4,3},
                               {2,3,1,1,2},
                               {0,4,1,0,3}},

                              {{3,3,3,1,4},
                               {4,1,1,1,1},
                               {4,2,0,2,0},
                               {3,0,2,3,0},
                               {4,3,4,4,4}},

                              {{2,1,2,2,0},
                               {3,3,2,3,3},
                               {3,3,2,3,1},
                               {1,2,0,2,1},
                               {1,0,0,3,0}},

                              {{1,0,4,0,2},
                               {1,0,0,4,4},
                               {0,1,4,0,4},
                               {0,4,4,0,4},
                               {2,1,2,1,2}}};
        // py_a1 = np.argpartition(a, (1, 4), 1)
        xarray<long> py_a1 = {{{1,3,0,4,1},
                               {0,1,2,1,3},
                               {4,2,3,0,2},
                               {3,4,1,3,0},
                               {2,0,4,2,4}},

                              {{3,3,2,2,4},
                               {2,1,0,0,0},
                               {4,4,4,3,1},
                               {0,2,3,4,2},
                               {1,0,1,1,3}},

                              {{1,4,4,4,2},
                               {2,1,2,1,1},
                               {3,3,3,2,3},
                               {4,0,0,0,0},
                               {0,2,1,3,4}},

                              {{4,3,4,0,0},
                               {3,4,2,4,3},
                               {2,0,0,2,2},
                               {1,1,3,3,4},
                               {0,2,1,1,1}},

                              {{3,1,1,0,0},
                               {1,4,4,2,4},
                               {0,2,2,3,2},
                               {2,3,0,4,1},
                               {4,0,3,1,3}}};
        // py_a2 = np.argpartition(a, (1, 3), 2)
        xarray<long> py_a2 = {{{2,0,4,3,1},
                               {0,4,1,3,2},
                               {2,4,1,0,3},
                               {1,4,2,0,3},
                               {3,0,1,4,2}},

                              {{4,2,3,0,1},
                               {4,1,2,3,0},
                               {2,3,0,4,1},
                               {1,0,2,3,4},
                               {4,2,1,3,0}},

                              {{4,1,3,2,0},
                               {0,1,4,3,2},
                               {4,0,3,2,1},
                               {4,0,1,2,3},
                               {3,1,2,4,0}},

                              {{4,3,2,0,1},
                               {4,2,0,1,3},
                               {4,2,3,0,1},
                               {4,1,0,2,3},
                               {2,4,0,1,3}},

                              {{3,4,0,1,2},
                               {1,2,0,4,3},
                               {3,1,4,2,0},
                               {0,3,1,2,4},
                               {1,2,4,3,0}}};

        auto a0 = xt::argpartition(py_a, {1, 2}, 0);
        auto a1 = xt::argpartition(py_a, {1, 4}, 1);
        auto a2 = xt::argpartition(py_a, {1, 3}, 2);

        EXPECT_EQ(xt::cast<std::size_t>(xt::view(py_a0, 2, all(), all())), xt::view(a0, 2, all(), all()));
        EXPECT_EQ(xt::cast<std::size_t>(xt::view(py_a1, all(), 4, all())), xt::view(a1, all(), 4, all()));
        EXPECT_EQ(xt::cast<std::size_t>(xt::view(py_a2, all(), all(), 3)), xt::view(a2, all(), all(), 3));

        EXPECT_EQ(xt::cast<std::size_t>(xt::view(py_a0, 1, all(), all())), xt::view(a0, 1, all(), all()));
        EXPECT_EQ(xt::cast<std::size_t>(xt::view(py_a1, all(), 1, all())), xt::view(a1, all(), 1, all()));
        EXPECT_EQ(xt::cast<std::size_t>(xt::view(py_a2, all(), all(), 1)), xt::view(a2, all(), all(), 1));
    }
}
